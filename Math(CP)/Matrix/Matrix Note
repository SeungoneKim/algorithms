<Matrix Note>

- 행렬의 덧셈은 다음과 같이 한다.
/*
//code
for(int i=0;i<n;i++){
    for(int j=0;j<m;j++){
        c[i][j] = a[i][j]+b[i][j];
    }
}

- 시간복잡도는 O(N^2)이다.

*/

- 행렬의 곱셈은 다음과 같이 한다.
/*
//code
for(int i=0;i<n;i++){
    for(int j=0;j<r;j++){
        c[i][j]=0;
        for(int k=0;k<m;k++){
            c[i][j] += a[i][k]*b[k][j];
        }
    }
}
*/
- 시간복잡도는 O(N^3)이다.
- 스트라센 알고리즘을 이용하면 O(N^2.807)으로 시간복잡도를 줄일 수 있다.
- 이는 PS분야에서는 크게 의미가 없다,


- 행렬의 제곱은 다음과 같이 한다.

/*
//code

typedef vector<vector<int>> matrix;
matrix operator * (const matrix &a, const matrix &b) {
    int n = a.size();
    matrix c(n, vector<int>(n));
    for (int i=0; i<n; i++) {
        for (int j=0; j<n; j++) {
            for (int k=0; k<n; k++) {
                c[i][j] += a[i][k] * b[k][j];
            }
            c[i][j] %= 1000;
        }
    }
    return c;
}

matrix ans(n,vector<int>(n));
matrix a(n,vector<int>(n));

for(int i=0;i<n;i++){
    for(int j=0;j<n;j++){
        cin >> a[i][j];
    }
    ans[i][i]=1;
}

while(b>0){
    if(b%2 == 1){
        ans = ans*a;
    }
    a = a*a;
    b /=2;
}

*/
- 정수의 제곱과 마찬가지로 분할정복을 이용한다.
- 시간복잡도는 O(lgN)이다.
- 이는 정수와 달리 행렬은 곱하는 과정에서만 O(N^3)의 시간복잡도를 갖기 때문이다.