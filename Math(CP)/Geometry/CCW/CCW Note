<CCW Note>

- CCW는 세 점이 있을 때, P1->P2->P3가 반시계,시계,일직선인지 여부를 알아내는 알고리즘이다.
- 시계방향은 -1, 일직선은 0, 반시계방향은 1로 나타낸다.

- 벡터 곱(외적)의 부호와 같은 의미를 갖게 된다.
/*
// code

int ccw(int x1, int y1, int x2, int y2, int x3, int y3){
    int temp= x1*y2+x2*y3+x3*y1;
    temp = temp-x2*y1-x3*y2-y3*x1;
    if(temp>0) return 1;
    else if(temp<0) return -1;
    else return 0;
}

*/

<Issue1 : 삼각형의 넓이>
- 삼각형의 넓이는 CCW 공식의 결과를 통해 1/2배 하여서 구할 수 있다.
- 다각형은 삼각형으로 계속 나누어서 넓이를 구할 수 있다.
- (중요) n각형에 대해서는 n+1개로 신발끈 공식을 적용하고 1/2배 하여도, 정답을 구할 수 있다.

<Issue2 : 선분의 교차>
- 두 선분이 교차하는지 여부에 대해서 구할 수 있다.
- P1-P2 선분과 P3-P4 선분에 대해서 P1-P2-P3의 방향과 P1-P2-P4의 방향이 반대이면 된다.
- 두 선분이 만나지 않을 수도 있기 때문에 P3-P4-P1의 방향과 P3-P4-P2의 방향도 서로 반대여야 한다.

- 세 점이 직선을 이루고 있는 경우까지 고려하려면, ccw()*ccw()<=0 을 통해 판단해야한다.(등호를 추가)
- 단, P1-P2-P3 와 P1-P2-P4의 ccw()*ccw()값이 둘다 0인 경우는 네 점이 한 직선 상에 있을 때이고, 
    이때는 P2에 대한 P3의 위치를 조사해주어야 한다.