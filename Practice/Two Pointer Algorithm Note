<Two Pointer Algorithm Note>

- A[1] ... A[N]에서 1<=i<=j<=N을 만족하는 i,j에 대해서 A[i]+ .. + A[j]=M을 만족하는 (i,j)쌍을 효율적으로 찾을 수 있는 알고리즘.


- 만족하는 i,j쌍을 모두 탐색하고, A[i]+ .. + A[j]를 매번 계산하면 O(N^3)의 시간복잡도가 걸린다.
- A[i] + .. + A[j]를 매번 계산하는 과정을 축소하면 O(N^2)의 시간복잡도에 계산을 할 수 있다.

/*
//code
int answ=0
for(int i=0;i<n;i++){
    int sum=0;
    for(int j=i;j<n;j++){
        sum +=a[j];
        if(sum == m) answ++;
    }
}
*/

- 투 포인터 알고리즘을 이용하면 시간복잡도를 O(N)으로 줄일 수 있다.

/*
//code
int left=0,right=0,sum=a[0],answ=0;
while(left<=right && right<n){
    if(sum<m){
        right++;
        sum+=a[right];
    }
    else if(sum==m){
        answ++;
        right++;
        sum+=a[right];
    }
    else if(sum>m){
        sum-=a[left];
        left++;
    }
}
*/

- right가 배열 A를 순회하는 과정에서 left도 같이 탐색을 진행하므로 시간복잡도가 O(N)을 만족한다.