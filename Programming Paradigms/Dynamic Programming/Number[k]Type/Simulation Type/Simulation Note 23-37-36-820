<DP Simulation>

- 한가지 경우가 두가지 경우를 '파생'시키는 시뮬레이션 문제를 생각해보자.

- 만약 BFS로 접근하면 매번 케이스마다 큐에 넣는 케이스가 2배가 될 것이다.
- 즉, O(2^N)이 될 수 있다.

- 반면, DP로 접근하면 N*M 경우를 세는 테이블만 채우면 된다.
- 이는 DP가 BFS보다 시간복잡도가 작다는 결론으로 이어진다.

< Bottom-Up >
- BFS가 아닌 DP로 '그래프가 아닌 시뮬레이션'을 하기 위한 조건은 하한선(0이상의 값)과 상한선이 정해져 있어야 한다는 것이다.
- 이는 DP테이블의 크기를 결정해야 하기 때문이다.
- 이것은 bottom-up으로 dp 시뮬레이션 문제를 풀 때의 이야기이다.

< Top-Down >
- top-down으로 설계를 해야지 어떤 케이스를 파생시킨 이전 케이스에 대한 추적이 쉬워서 더 편하다.
- 결정적으로 top-down으로 설계하는 문제를 구분하는 방법은 number k가 정해져있지 않다는 점이다.
- 정해져있어도 bottom-up으로 풀 수 없는 경우에도 top-down으로 접근한다.