<Meet in the Middle Note>

- 문제를 절반으로 나누어서 양쪽 절반에서 모든 경우를 다 해보는 방법이다.
- 탐색의 크기가 많이 줄어들게 된다.
- 분할정복과는 엄연히 다르다.


- A[1] ... A[N]에서 크기가 양수인 부분수열 중에서, 합이 M을 만족하는 부분수열 쌍의 개수를 효율적으로 찾을 수 있는 알고리즘.



- 가능한 모든 부분수열쌍에 대해서 탐색을 하면 걸리는 시간복잡도는 O(2^N)이다.


- '가운데서 만나기'알고리즘을 이용하면 이 문제를 보다 효율적으로 해결할 수 있다. 

1. 배열을 반으로 나누어서 up배열, down배열을 만들어 준다.
2. up배열과 down배열에서 만들수 있는 모든 경우를 원소로 포함하는 배열을 각각 만들어 준다.
3. 각각을 정렬한 후, left,right를 두어 two-pointer algorithm을 적용시켜주면 된다.

/*
//code

int m=n/2;
n-=m;

vector<int>first(1<<n);
for(int i=0;i<(1<<n);i++){
    for(int k=0;k<n;k++){
        if(i&(1<<k)){
            first[i] += a[k];
        }
    }
}
vector<int>second(1<<m);
for(int i=0;i<(1<<m);i++){
    for(int k=0;k<m;k++){
        if(i&(1<<k)){
            second[i] += a[k];
        }
    }
}

sort(first.begin(),first.end());
sort(second.begin(),second.end());
reverse(second.begin(),second.end());

n=(1<<n);
m=(1<<m);
int left=0,right=0;
long long answ=0;
while(left<n && right<m){
    if(first[left]+second[right]==s){
        long long c1=1;
        long long c2=1;
        left++; right++;
        while(left<n && first[left]==left[left-1]){
            c1++;
            left++;
        }
        while(right<m && second[right]==second[right-1]){
            c2++;
            right++;
        }
        answ += c1*c2;
        else if(first[left]+second[right]<s){
            left++;
        }
        else{
            right++;
        }
    }
}

*/

- 이 알고리즘을 사용하면 시간 복잡도는 O(2^(N/2) * N)이 된다.