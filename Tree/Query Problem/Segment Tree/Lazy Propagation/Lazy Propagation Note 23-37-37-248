<Lazy Propagation Note>

- 세그먼트 트리에서 구간의 업데이트를 효율적으로 하는 방법이다.

- 세그먼트 트리에서 update()함수를 이용해서 값을 변경하는 연산은 값 1개를 변경할 때 사용되었다.
- 즉, 어떤 구간의 값들을 변경하게 되면 O(NlgN)이 걸린다.
- Lazy Propagation을 이용하면 구간의 업데이트를 O(lgN)에 할 수 있다.

- Lazy Propagation의 핵심적인 아이디어는 모든 서브트리의 노드가 값이 변경되야하는 노드를 찾았을 때, 이를 나중에 사용할 때 업데이트하도록 미루는 아이디어이다.
- 예를 들어 0~9의 노드를 세그먼트트리로 구현했다고 생각해보자.
- 3~7의 구간의 값을 변경하고 싶으면, 3~4와 5~7 노드의 서브트리들의 노드들은 모두 값이 변경되어야한다.
- 이때, 3~4와 5~7 노드의 서브트리들의 값을 나중에 사용할 때 변경하는 것이다.
- 나중에 업데이트 해야할 값을 lazy라는 배열에 따로 저장해놓는다.

- 구간의 합을 구하는 등 다른 연산을 할 때, 그 노드를 방문하게 되면 lazy를 살펴보고 value를 update해준다.

/*
//code

long long init(vector<long long> &a, vector<long long> &tree, int node, int start, int end) {
    if (start == end) {
        return tree[node] = a[start];
    } else {
        return tree[node] = init(a, tree, node*2, start, (start+end)/2) + init(a, tree, node*2+1, (start+end)/2+1, end);
    }
}
void update_lazy(vector<long long> &tree, vector<long long> &lazy, int node, int start, int end) {
    if (lazy[node] != 0) {
        tree[node] += (end-start+1)*lazy[node];
        // leaf가 아니면
        if (start != end) {
            lazy[node*2] += lazy[node];
            lazy[node*2+1] += lazy[node];
        }
        lazy[node] = 0;
    }
}
void update_range(vector<long long> &tree, vector<long long> &lazy, int node, int start, int end, int left, int right, long long diff) {
    update_lazy(tree, lazy, node, start, end);
    if (left > end || right < start) {
        return;
    }
    if (left <= start && end <= right) {
        tree[node] += (end-start+1)*diff;
        if (start != end) {
            lazy[node*2] += diff;
            lazy[node*2+1] += diff;
        }
        return;
    }
    update_range(tree, lazy, node*2, start, (start+end)/2, left, right, diff);
    update_range(tree, lazy, node*2+1, (start+end)/2+1, end, left, right, diff);
    tree[node] = tree[node*2] + tree[node*2+1];
}
long long sum(vector<long long> &tree, vector<long long> &lazy, int node, int start, int end, int left, int right) {
    update_lazy(tree, lazy, node, start, end);
    if (left > end || right < start) {
        return 0;
    }
    if (left <= start && end <= right) {
        return tree[node];
    }
    return sum(tree, lazy, node*2, start, (start+end)/2, left, right) + sum(tree, lazy, node*2+1, (start+end)/2+1, end, left, right);
}

int query(vector<int> &tree, vector<int> &lazy, int node, int start, int end, int left, int right) {
    update_lazy(tree, lazy, node, start, end);
    if (left > end || right < start) {
        return 0;
    }
    if (left <= start && end <= right) {
        return tree[node];
    }
    return query(tree, lazy, node*2, start, (start+end)/2, left, right) ^ query(tree, lazy, node*2+1, (start+end)/2+1, end, left, right);
}

*/