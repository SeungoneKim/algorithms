<BST Note>

- 이진 검색트리는 현재 노드의 왼쪽 서브트리에 항상 현재 노드의 값보다 작은 값이 들어있다.
- 이짐 검색트리는 현재 노드의 오른쪽 서브트리에 항상 현재 노드의 값보다 큰 값이 들어있다.

/*
//code
struct Node{
    int data;
    Node* left;
    Node* right;
    Node(int data){
        this->data = data;
        this->left = NULL;
        this->right = NULL;
    }
};
struct BST{
    Node* root;
    BST(){
        this->root=NULL;
    }
}
// 가장 첫 노드를 추가하는 경우
Node* insert(Node* node, int data){
    if(node == NULL){
        return new Node(data);
    }
}
*/

- BST에 새로운 노드를 추가하는 경우는 크게 두가지 경우로 나뉜다.
1. 가장 첫 노드를 추가하는 경우에는 root를 새로운 노드로 설정해주면 된다.
2. 그 이외의 경우에는 노드에 포함된 값과 대소비교를 하면서 왼쪽 또는 오른쪽으로 이동하면 된다.

/*
// code

// method1
Node* p = this->root;
while(true){
    if(p->data < node->data){
        if(p->right==NULL){
            p->right=node;
            break;
        }
        else{
            p = p->right;
        }
    }
    else{
        if(p->left==NULL){
            p->left=node;
            break;
        }
        else{
            p = p->left;
        }
    }
}

// method2 : using recursion
Node* insert(Node* node, int data){
    if(node == NULL) return new Node(data);
    if(data < node->data){
        node->left = insert(node->left, data);
    }
    else{
        node->right = insert(node->right, data);
    }
    return node;
}
void insert(int data){
    this->root = insert(this->root, data);
}

*/

- 트리를 인오더 순회를 하면, BST에 저장된 값을 오름차순으로 구할 수 있다.
/*
//code

void inorder(Node*node){
    if(node == NULL) return;
    inorder(node->left);
    cout << node->data << ' ';
    inorder(node->right);
}
void inorder(){
    inorder(this->root);
    cout << '\n';
}


- BST에서 삭제의 경우에는 총 3가지 경우의 수가 있다.
- 자식이 0,1,2개인 경우이다.
- 0 개인 경우에는 그냥 삭제하면된다.
- 1 개인 경우에는 자식노드와 부모노드를 이어주고 삭제하면된다.
- 2 개인 경우에는 inorder successor를 찾은 이후에 지우려는 노드에 이 값을 채우고, 삭제하면 된다.

/*
// code
    Node *inorder_successor(Node *node) {
        Node *p = node;
        while (p->left != NULL) {
            p = p->left;
        }
        return p;
    }
    Node *remove(Node *node, int data) {
        if (node == NULL) {
            return node;
        }

        if (data < node->data) {
            node->left = remove(node->left, data);
        } else if (data > node->data) {
            node->right = remove(node->right, data);
        } else {
            if (node->left == NULL) {
                Node *temp = node->right;
                node = NULL;
                return temp;
            } else if (node->right == NULL) {
                Node *temp = node->left;
                node = NULL;
                return temp;
            }

            Node *temp = inorder_successor(node->right);
            node->data = temp->data;
            node->right = remove(node->right, temp->data);
        }

        return node;
    }
    void remove(int data) {
        this->root = remove(this->root, data);
    }
*/

- BST의 삽입/삭제/검색은 시간 복잡도가 O(h)이 된다.
- 높이의 최대값은 N이 될 수 있기 때문에, O(N)이라고 볼 수 있디.
- 따라서, 균형이 맞춰진 트리를 사용하는 것이 바람직하다.
- 균형이 맞추어진 BST는 AVL트리, Red-Black트리, Sply트리, Treao가 있다.

- C++의 경우에는 set, map을 이용하면 되고, 정렬된 상태가 필요 없다면 unordered_set,unordered_map을 이용하면 된다.

============================================================================
- 위에서 언급한 모든 기능을 구현한 코드는 다음과 같다.

struct Node {
    int data;
    Node *left;
    Node *right;
    Node(int data) {
        this->data = data;
        this->left = NULL;
        this->right = NULL;
    }
};
struct BST {
    Node *root;
    BST() {
        this->root = NULL;
    }
    Node *insert(Node *node, int data) {
        if (node == NULL) {
            return new Node(data);
        }
        if (data < node->data) {
            node->left = insert(node->left, data);
        } else {
            node->right = insert(node->right, data);
        }
        return node;
    }
    void insert(int data) {
        this->root = insert(this->root, data);
    }
    void inorder(Node *node) {
        if (node == NULL) return;
        inorder(node->left);
        cout << node->data << ' ';
        inorder(node->right);
    }
    void inorder() {
        inorder(this->root);
        cout << '\n';
    }
    Node *inorder_successor(Node *node) {
        Node *p = node;
        while (p->left != NULL) {
            p = p->left;
        }
        return p;
    }
    Node *remove(Node *node, int data) {
        if (node == NULL) {
            return node;
        }

        if (data < node->data) {
            node->left = remove(node->left, data);
        } else if (data > node->data) {
            node->right = remove(node->right, data);
        } else {
            if (node->left == NULL) {
                Node *temp = node->right;
                node = NULL;
                return temp;
            } else if (node->right == NULL) {
                Node *temp = node->left;
                node = NULL;
                return temp;
            }

            Node *temp = inorder_successor(node->right);
            node->data = temp->data;
            node->right = remove(node->right, temp->data);
        }

        return node;
    }
    void remove(int data) {
        this->root = remove(this->root, data);
    }
};