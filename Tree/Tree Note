<Tree Note>

- 트리는 사이클이 없는 연결 그래프이다.
- 정점의 개수가 V개일때, 간선이 V-1개이다.

- 루트는 절대적인 것이 아니라, 정하는 루트에 따라 상대적으로 변할 수 있다.

- 부모노드, 자식노드, 루트노드, 리프노드, 조상, 자손.
- 루트에서 부터의 '거리'를 깊이라고 정의한다.

<트리의 종류>
1) 이진트리 : 자식을 최대 2개만 가지고 있는 트리.
2) 포화이진트리 : 리프 노드를 제외한 노드들의 자식 수가 모두 2개인 이진트리
-> 높이가 h일때, 노드의 개수는 (2^h)-1개이다.
3) 완전이진트리 : 마지막 깊이에서 일부 노드가 없어도 되는 이진트리. (포화이진트리도 완전이진트리)

<트리의 표현>
1) 그래프의 표현과 같은 방식으로 구현할 수 있다.
2) 트리의 부모만 1차원 배열에 저장하는 방식으로 구현할 수 있다.
-> Union Find
3) 완전이진트리에서는 2*x에 왼쪽 자식 노드를, 2*x+1에 오른쪽 자식 노드를 저장하는 방식으로 구현할 수 있다.
-> Heap, Segment Tree
-> 이진 트리를 표현할 때, 구조체나 클래스를 이용하는 방법도 있다.

<트리의 순회>
1) 그래프와 마찬가지로 DFS,BFS로 순회할 수 있다.
2) 프리오더 : 노드방문->왼쪽자식->오른쪽자식
-> DFS와 방문순서가 같다.
3) 인오더 : 왼쪽자식->노드방문->오른쪽자식
-> BST에서 삭제 구현
-> 이진트리에서만 사용가능함.
4) 포스트오더 : 왼쪽자식->오른쪽자식->노드방문
-> Tree에서 DP, Segment Tree

<트리의 탐색>
- 그래프와 마찬가지로 DFS, BFS로 탐색할 수 있다.

<트리의 지름>
- 트리에 존재하는 모든 경로 중에서 가장 긴 것의 길이를 트리의 지름이라고 한다.

1. 한 정점 a에서 모든 정점까지의 거리르 구한 후, 가장 먼 거리의 정점을 u라고 한다.
2. u에서 모든 정점까지의 거리를 구한 후, 가장 먼 거리인 정점을 v라고 한다.
3. 이때, d(u,v)가 트리의 지름이다.