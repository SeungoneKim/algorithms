<DAG Note>

- DAG는 Directed Acyclic Graph의 약자로, 사이클이 없는 방향 있는 그래프를 의미한다.
- DAG의 기하학적 모양이라는 특성을 이용해서 특정한 작업들을 할 수 있다.

- 여러가지 일들 사이의 선형관계를 나타낼 때 사용하게되는 그래프이다.

<위상 정렬>
- 위상정렬은 그래프의 간선 u-v가 u가 v보다 먼저라는 의미일 때, 정점의 순서를 찾는 알고리즘이다.
- 어떤 정점 v의 순서에 추가되는 것은 u->v의 u가 모든 순서에 추가되었을 때이다.
- 순서에 추가되는 정점은 in-degree가 0일 때로 표현할 수 있다.
- BFS를 응용해서 구현할 수 있다. (indegree가 0일때만 큐에 넣는다)

/*
//code
indegree[10000];
queue<int>q;

for(int k=1;k<=n;k++){
    if(indegree[k]==0){
        q.push(k);
    }
}

while(!q.empty()){
    int x= q.front();
    q.pop();

    for(int k=0;k<a[x].size();k++){
        int y= a[x][k];
        indegree[y]--;
        if(indegree[y]==0){
            q.push(y);
        }
    }
}

*/


- 위상 정렬은 DAG에서만 할 수 있고, DAG는 사이클이 없다.
- 그래프의 간선을 모두 뒤집은 후, 정점이 스택에서 빠져나오는 순서를 기록하면 위상정렬의 순서와 같아지게 된다.
(스택에서 빠져나온다는 것은 더 이상 방문할 수 있는 정점이 없다는 것을 의미한다.)
- 이를 바탕으로, DFS로 구현할 수 있다.

/*
//code

void go(int x){
    check[x]=true;
    for(int y : a[x]){
        if(check[y]==false){
            go(y);
        }
    }
    cout << x << '\n';
}

-DAG에서 문제를 응용하는 방법은 다음과 같다.

1. priority queue는 크기가 큰 것을 우선적으로 top에 배치하므로, 작은 것이 top에 배치되기 원하면 음수로 바꾸어서 저장해야한다.
2. 가중치가 DAG에 포함이 되면, if(cost[next]<cost[cur]+edge.cost)라는 조건을 통해서 매번 갱신을 해주어야 한다.

3. 백트래킹을 통해 경로를 구해야하는 문제인 경우, 같은 정점이 큐에 또 들어간다는 문제가 생긴다.
-> check[]라는 배열을 통해서 큐에 들어간 정점을 기록할 수 있는 방법으로 문제를 풀면 된다.