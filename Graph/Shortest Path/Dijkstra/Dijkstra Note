<Dijkstra Note>

- 하나의 정점에서 다른 하나의 정점까지의 최단경로를 구할 수 있는 알고리즘이다.(Single Source and Single Destination Shortest Path Problem)
- 경로가 음수인 가중치를 가지고 있으면 사용할 수 없다.

1. 검사하지 않은 정점 중에서 dist값이 가장 작은 정점 v를 선택한다.
2. v를 체크한다.
3. v와 연결된 모든 정점을 검사한다.
4. 1,2,3의 단계를 모든 정점을 검사할 때까지 계속한다.

- 매번 하나의 정점에 대해서 모든 정점중 dist가 가장 작은 정점을 찾는다.
- 시간복잡도는 O(V^2)이다.

/*
//code

int dist[i];
bool check[i];

for(int k=1;k<vertex;k++){

    int m= infinity+1;
    int cur=-1;
    for(int i=1;i<=vertex;i++){
        if(check[i]==false && m > dist[i]){
            m=dist[i];
            cur=i;
        }
    }
    check[cur]=true;

    for(auto& a : adjlist[cur]){
        int next = a.destination;
        if(dist[next]>dist[cur]+a.cost){
            dist[next]=dist[cur]+a.cost
        }
    }
}

*/


- 다익스트라 알고리즘에서 시간복잡도를 줄이기 위해서는 dist값이 가장 작은 정점 v를 선택하는 과정에서 줄여야한다.
(최대/최소 찾는 상황에서 시간복잡도 줄이고 싶을 때 -> 프림,다익스트라 : 우선순위 큐, 구간범위있을 떼 : 세그먼트 트리)

- 다익스트라 알고리즘에서는 프림 알고리즘과 마찬가지로 우선순위 큐(힙)를 사용하여 시간을 줄일 수 있다.
- 이 방법을 이용하면 O(ElgE)로 시간복잡도를 줄일 수 있다.
- V의 범위가 너무 클 때는 반드시 우선순위 큐를 사용해야지 시간초과가 뜨지 않는다.
/*
//code

priority_queue<pair<int,int>>pq // {dist[i],i}
bool check[i];
int dist[i];

pq.push({0,init});
while(!pq.empty()){

    int cur = pq.top().second;
    
    pq.pop();
    if(!check[cur]){
        check[cur]=true;

        for(auto& a : adjlist[cur]){
            int next = a.destination;
            if(dist[next]>dist[cur]+a.cost){
                dist[next]=dist[cur]+a.cost;
                pq.push({-dist[next],next});
            }
        }
    }
}

*/

- 다익스트라 알고리즘에서 set(BST)을 이용하여 시간을 더 줄일 수 있다.
- 이 방법을 이용하면 O(ElgV)로 시간복잡도를 줄일 수 있다.

/*

set<pair<int,int>>s;
bool check[i];
int dist[i];


s.insert({0,init});
while(!s.empty()){
    auto p = *s.begin();
    s.erase(s.begin());
    int cur = p.second;

    for(auto& a : adjlist[cur]){
        int next= a.to;
        if(dist[next]>dist[cur]+a.cost){
            if(dist[next] != infinity){
                s.erase(s.find({dist[y],y}));
            }
            dist[next]=dist[cur] + a.cost;
            s.insert({dist[next],next});
        }
    }
}

*/

- 보통은 우선순위 큐를 이용하는 방법이 set을 이용하는 방법보다 보편적으로는 많이 사용된다.

<다익스트라 문제풀이>
1. 다익스트라에서 백트래킹은 보편적으로 사용하는 before[]배열을 사용하면 된다.
2. 다익스트라에서 V의 값이 크면 반드시 O(ElgE)의 방법을 사용해야 한다.

3. 다익스트라에서 k번째 최단경로를 구할 때는, dist를 priority_queue로 만드는 방법을 고려해볼 수 있다.
4. 다익스트라에서 임의의 어떤 도로를 k개를 가중치 0 으로 바꿀 수 있으면 (도로 가중치를 0으로 만든 횟수)를 status로 dist에 기록하기 위해 DP처럼 2차원 배열로 바꾸는 방법을 고려해 볼 수 있다.
