<Rabin-Karp Algorithm Note>

- 라빈 카프 알고리즘은 해쉬함수를 이용하여 문자열 검색을 더 효율적으로 할 수 있는 알고리즘이다.

- 해쉬함수는 어떠한 문자열을 어떤 정수로 대응시켜주는 함수이다.

- 해쉬함수를 쓰는 이유는, 문자열 비교에는 시간복잡도가 크지만, 정수는 비교하는데 시간복잡도가 O(1)인 장점을 이용하기 위함이다.

/*
// code
int match(string s, string p){
    int n=s.size(), m=p.size();
    int hash_p= hash(p);
    for(int i=0;i<=n-m;i++){
        int hash_s=hash(s[i..i+m-1]);
        if(hash_p == hash_s){
            if(s[i..i+m-1]==p) return i;
        }
    }
    return -1;
}
*/

- 서로 다른 두 문자열도 같은 해시값을 가질 수 있기 때문에, 실제로 문자열을 비교하는 과정도 필요하다. -> if(s[i..i+m-1]==p)
- hash()의 시간복잡도는 O(M)이므로, O(N*M)이다.
- 이는 큰 개선으로 보기는 힘들다.


- S[i..i+m-1]의 해시값을 계산한 이후 다음에 해시값을 계산하는 문자열은 S[i+1..i+m]이다.
- 이 둘의 계산에는 S[i],S[i+m]만 차이가 있다.
- 이전 해시값을 이용하여 다음 해시값을 이용하면 시간복잡도를 크게 개선할 수 있다.
- 좋으면 O(N+M)이고, 최악의 경우에 O(NM)이다. (해시 값이 같아서 최종적 문자열 비교를 해야하는 것이 최악의 경우이다.)

/*
//code

int mod=2147483647;
int base=256;

long long h(string s) {
    long long ans = 0;
    for (char ch : s) {
        ans = (ans * base + ch) % mod;
    }
    return ans;
}
int match(string &s, string &p) {
    int n = s.length();
    int m = p.length();
    if (n < m) return 0;
    long long hash_p = h(p);
    long long hash_s = h(s.substr(0, m));
    long long first = 1;
    for (int i=0; i<m-1; i++) {
        first = (first * base) % mod;
    }

    for (int i=0; i<=n-m; i++) {
        if (hash_p == hash_s) {
            // if(s.substr(i,m) == p)
            return 1;
        }
        if (i+m < n) {
            hash_s = hash_s - (s[i]*first)%mod;
            hash_s = (hash_s + mod) % mod;
            hash_s = ((hash_s * base)%mod + s[i+m]) % mod;
        }
    }
    return 0;
}

*/

- 라빈 카프의 수행시간은 해시 함수에 영향을 받는다.

- 라빈 카프 알고리즘에서 자주 사용하는 해시 함수는 라빈 핑거프린트이다.
- 라빈 핑거프린트는 문자열을 구성하는 문자의 집합을 알고 있을 때 사용한다.
- 라빈 카프를 구현할 때는 진법과 소수를 잘 정해서 비교가 최소로 일어나게 구현해 주어야 한다. 이것이 좋은 해시함수이다.

- 문자열을 앞에서부터 순서대로 아스키코드로 바꾸어 256진법 수로 변환하는 방법을 사용한다.
- 이 함수를 이용하면 이전 해시값을 이용하여 다음 해시값을 계산할 수 있게 된다.